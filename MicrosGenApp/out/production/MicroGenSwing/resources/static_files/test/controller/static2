    }

    @Test
    void testCreate_InvalidInput_ShouldReturnBadRequest() throws Exception {
        mockMvc.perform(post("${controller_api}")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{}"))
                .andExpect(status().isBadRequest())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    void testCreate_EntityNotFoundException_ShouldReturnNotFound() throws Exception {
        when(${lowercase_model_name}Service.create(any(${class_name}.class))).thenThrow(new EntityNotFoundException("${model_name} not found"));

        mockMvc.perform(post("${controller_api}")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(${lowercase_model_name}Request)))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.error").value("${model_name} not found"))
                .andExpect(jsonPath("$.timestamp").exists());
    }

    @Test
    void testCreate_AnyException_ShouldReturnBadRequest() throws Exception {
        doThrow(new DataAccessException("Database connection failed") {}).when(${lowercase_model_name}Service).create(any(${class_name}.class));

        mockMvc.perform(post("${controller_api}")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(${lowercase_model_name}Request)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").value("Database connection failed"))
                .andExpect(jsonPath("$.timestamp").exists());
    }

    @Test
    void testGetById_Success_ShouldReturnOk() throws Exception {
        when(${lowercase_model_name}Service.getById(Static${model_name}.ID)).thenReturn(${lowercase_model_name}Model);

        mockMvc.perform(get("${controller_api}/{id}", Static${model_name}.ID))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
